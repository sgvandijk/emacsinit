#+TITLE: Emacs Configuration
#+AUTHOR: Sander van Dijk

* Installing Emacs

** OSX
#+BEGIN_SRC sh
brew install emacs --with-cocoa --with-imagemagick --with-gnutls
#+END_SRC

Other possible options:
- ~--devel~ :: installs latest development version
- ~--HEAD~ :: installs latest Git head

** Ubuntu

#+BEGIN_SRC sh
sudo add-apt-repository -y ppa:ubuntu-elisp
sudo apt-get update
sudo apt-get install emacs-snapshot
#+END_SRC

* Personal Information

#+BEGIN_SRC emacs-lisp
(setq
  user-full-name "Sander van Dijk"
  user-mail-address "sgvandijk@gmail.com"
)
#+END_SRC

* Customize settings
Load local configuration, such as platform dependent stuff
#+BEGIN_SRC emacs-lisp
(setq local-file (expand-file-name "local.el" user-emacs-directory))
(load local-file)
#+END_SRC
* Appearance
** Theme

# Cool blue theme
# #+BEGIN_SRC emacs-lisp
# (use-package nord-theme
#   :ensure t
#   :config
#   (load-theme 'nord t t))
# #+END_SRC

# Built in dark Tango palette
# #+BEGIN_SRC emacs-lisp
# (load-theme 'tango-dark)
# #+END_SRC

# #+BEGIN_SRC emacs-lisp
# (use-package tangotango-theme
#   :ensure t
#   :config
#   (load-theme 'tangotango t t)
# )
# #+END_SRC

Very popular theme
#+BEGIN_SRC emacs-lisp
  (use-package zenburn-theme
  :ensure t
  :config
  (load-theme 'zenburn t t))
#+END_SRC

# Base16 provides carefully chosen syntax highlighting and a default set
# of sixteen colors suitable for a wide range of applications.

# #+BEGIN_SRC emacs-lisp
# (use-package base16-theme
#   :ensure t
#   :config
#   (load-theme 'base16-ashes t))
# #+END_SRC

# Good-looking[tm] theme with quite fully-supported font-faces for
# various modes.
# #+BEGIN_SRC emacs-lisp
# (use-package moe-theme
#   :ensure t
#   :init
#   (progn
#     ;; (setq moe-theme-resize-markdown-title '(1.5 1.4 1.3 1.2 1.0 1.0))
#     (setq moe-theme-resize-org-title '(1.5 1.4 1.3 1.2 1.1 1.0 1.0 1.0 1.0))
#     ;;(setq moe-theme-resize-rst-title '(1.5 1.4 1.3 1.2 1.1 1.0))
#   )
#   :config
#   ;; (moe-dark)
# )
# #+END_SRC

# Nice and dark, but org-mode blocks are very distracting
# #+BEGIN_SRC emacs-lisp
# (use-package material-theme
#   :ensure t)
# #+END_SRC

** Font

# Adobe's Source Code font is specially designed for coding. It can be
# downloaded from Google fonts:
# https://fonts.google.com/specimen/Source+Code+Pro

#+BEGIN_SRC emacs-lisp
  ;; (set-face-attribute 'default nil
  ;; :family "Source Code Pro"
  ;; :height 102
  ;; )

  (add-to-list 'default-frame-alist
               '(font . "Hack-10"))
#+END_SRC

** Diminish
#+BEGIN_SRC emacs-lisp
(use-package diminish
  :ensure t)
(diminish 'abbrev-mode "Abv")
#+END_SRC
* Defaults

A collection of defaults for soem global settings
#+BEGIN_SRC emacs-lisp
;; Keep all backup and auto-save files in one directory
(setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
(setq auto-save-file-name-transforms '((".*" "~/.emacs.d/auto-save-list/" t)))

;; Turn off the blinking cursor
(blink-cursor-mode -1)

(setq-default indent-tabs-mode nil)
(setq-default indicate-empty-lines t)
(setq-default c-basic-offset 2)
(setq-default c-default-style "bsd")
(setq-default js-indent-level 2)

(show-paren-mode t)
(column-number-mode t)

;; Turn off system bell
;; (setq visible-bell t) ;; Standard solution
(setq visible-bell nil)
(setq ring-bell-function 'ignore) ;; Solution to prevent ghosting on OSX

;; Use Cua mode for modern key bindings
(cua-mode t)

;; Enable line numbers in prog and config modes
(add-hook 'prog-mode-hook 'linum-mode)
(add-hook 'conf-mode-hook 'linum--mode)

;; Enable dir-locals for remote editing
(setq enable-remote-dir-locals t)

#+END_SRC

* Auto mode selection

#+begin_src emacs-lisp
(add-to-list 'auto-mode-alist '("\\.launch\\'" . xml-mode))
#+end_src

* Magit

#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t
    :bind ("C-x g" . magit-status)
    :init (setq magit-display-buffer-function
           #'magit-display-buffer-fullframe-status-v1)
    (add-hook 'git-commit-setup-hook 'git-commit-turn-on-flyspell))

  (use-package forge
    :ensure t
    :after magit)
#+END_SRC

* Ido

Ido = Interactive Do. Ido adds smart autocompletion in many places
such as when switching buffers or finding files.

# #+BEGIN_SRC emacs-lisp
#   (use-package ido
#     :ensure t
#       :init
#       (setq ido-enable-flex-matching t)
#       (setq ido-everywhere t)
#       :config
#       (ido-mode t))

#     ;;; Allow spaces when using ido-find-file
#     (add-hook 'ido-make-file-list-hook
#               (lambda ()
#                 (define-key ido-common-completion-map (kbd "SPC") 'self-insert-command)))
# #+END_SRC

* Ivy

Ivy is an alternative completion mechanism. 'Counsel' is built on top
of it to provide enhanced versions of common Emacs commands.

#+begin_src emacs-lisp
  ;; (use-package counsel
  ;;   :ensure t
  ;;   :after ivy
  ;;   :config (counsel-mode))

  (use-package ivy
    :ensure t
    :defer 0.1
    :diminish
    :bind (("C-c C-r" . ivy-resume)
           ("C-x B" . ivy-switch-buffer-other-window))
    :custom
    (ivy-count-format "(%d/%d) ")
    (ivy-use-virtual-buffers t)
    :config (ivy-mode))
#+end_src

* Multiple cursors

#+BEGIN_SRC emacs-lisp
(use-package multiple-cursors
  :ensure t
  :bind (
    ("C-S-c C-S-c" . mc/edit-lines)
    ("C->" . mc/mark-next-like-this)
    ("C-<" . mc/mark-previous-like-this)))
#+END_SRC

* Flycheck

#+BEGIN_SRC emacs-lisp
(use-package flycheck
  :ensure t
  :init
  (global-flycheck-mode))
#+END_SRC

* Company mode
Turn on company mode everywhere
#+BEGIN_SRC emacs-lisp
(use-package company
  :ensure t
  :defer t
  :diminish company-mode
  :config
  (add-hook 'after-init-hook 'global-company-mode))
#+END_SRC
* Projectile
#+BEGIN_SRC emacs-lisp
(use-package projectile
  :ensure t
  :diminish projectile-mode
  :config
  (define-key projectile-mode-map (kbd "s-p") 'projectile-command-map)
  (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
  (projectile-mode +1))
#+END_SRC

* Org

  #+BEGIN_SRC emacs-lisp
    ;; set some keybindings
    (global-set-key (kbd "C-c o c") 'org-capture)
    (global-set-key (kbd "C-x a") 'org-agenda)

    (add-hook 'org-mode-hook
              (lambda ()
                (local-set-key (kbd "C-c ,") 'org-time-stamp-inactive))
              (turn-on-flyspell))

    ;; fontify code in code blocks
    (setq org-src-fontify-natively t)
    ;; hide emphasis markup
    (setq org-hide-emphasis-markers t)

    ;; Pretty bullets for headlines
    (use-package org-bullets
      :ensure t
      :config
      (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))

    ;; set some faces
    (custom-theme-set-faces
     'zenburn
     '(org-document-title ((t (:inherit org-document-title :weight bold :height 1.5))))
     '(org-level-1 ((t (:inherit outline-1 :weight semi-bold :height 1.4))))
     '(org-level-2 ((t (:inherit outline-2 :weight semi-bold :height 1.3))))
     '(org-level-3 ((t (:inherit outline-3 :weight semi-bold :height 1.2))))
     '(org-level-4 ((t (:inherit outline-4 :weight semi-bold :height 1.1))))
     '(org-level-5 ((t (:inherit outline-5))))
     '(org-meta-line ((t (:inherit font-lock-comment-face :height 0.8))))
     )

    ;; set directory to search for tasks for the agenda
    (setq org-agenda-files '("~/Dropbox/org/tasks/" "~/Dropbox/org/roam/meetings" "~/Dropbox/org/roam/daily"))
  #+END_SRC

** Org-Roam

#+BEGIN_SRC emacs-lisp
  (use-package org-roam
    :ensure t
    :custom (org-roam-directory (file-truename "~/Dropbox/org/roam/"))
    :bind (("C-c n l" . org-roam-buffer-toggle)
           ("C-c n f" . org-roam-node-find)
           ("C-c n g" . org-roam-graph)
           ("C-c n i" . org-roam-node-insert)
           ("C-c n t" . org-roam-dailies-capture-today)
           ("C-c n T" . org-roam-dailies-goto-today))
    :init
      (setq org-roam-capture-templates
            '(
              ("d" "default" plain
               "%?"
               :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org"
                                  "#+title: ${title}\n")
               :unnarrowed t)
              ("m" "meeting" plain
               "%?"
               :if-new (file+head "meetings/%<%Y%m%d%H%M%S>-${slug}.org"
                                  "#+title: ${title}\n")
               :unnarrowed t)
              )
            )
      :config (org-roam-db-autosync-mode)
    )

  (setq org-roam-v2-ack t)
#+END_SRC

* C++

#+BEGIN_SRC emacs-lisp
;;; Function to rerun last compile command in appropriate buffer
(global-set-key (kbd "C-x <f9>") 'compile-again)

(setq compilation-last-buffer nil)
(defun compile-again (pfx)
  """Run the same compile as the last time.

If there was no last time, or there is a prefix argument, this acts like
M-x compile.
"""
(interactive "p")
(if (and (eq pfx 1)
         compilation-last-buffer)
    (progn
      (set-buffer compilation-last-buffer)
      (revert-buffer t t))
  (call-interactively 'compile)))

;;; Run debugger
(global-set-key (kbd "C-x <f10>") 'gdb)
#+END_SRC

** irony-mode
irony-mode is an Emacs minor-mode that aims at improving the editing
experience for the C, C++ and Objective-C languages. It works by using
a combination of an Emacs package and a C++ program (irony-server)
that uses libclang.

#+BEGIN_SRC emacs-lisp
(use-package irony
  :diminish irony-mode
  :init
  (add-hook 'c++-mode-hook 'irony-mode)
  (add-hook 'c-mode-hook 'irony-mode)
  (add-hook 'objc-mode-hook 'irony-mode)
  (add-hook 'irony-mode-hook 'my-irony-mode-hook)
  (add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options))

(defun my-irony-mode-hook ()
  (define-key irony-mode-map [remap completion-at-point]
    'irony-completion-at-point-async)
  (define-key irony-mode-map [remap complete-symbol]
    'irony-completion-at-point-async))
#+END_SRC

** flycheck-irony
Flycheck checker using irony

#+BEGIN_SRC emacs-lisp
(use-package flycheck-irony
  :requires irony
  :config
  (add-hook 'flycheck-mode-hook #'flycheck-irony-setup))
#+END_SRC

** company-irony
Autocompletion using irony

#+BEGIN_SRC emacs-lisp
(use-package company-irony
  :requires irony
  :config
  (add-to-list 'company-backends 'company-irony)
  (add-hook 'irony-mode-hook 'company-irony-setup-begin-commands))
#+END_SRC

** eldoc-irony
Function signatures using irony

#+BEGIN_SRC emacs-lisp
(use-package irony-eldoc
  :requires irony
  :config
  (add-hook 'irony-mode-hook 'irony-eldoc))
#+END_SRC

** clang-format
#+BEGIN_SRC emacs-lisp
(use-package clang-format
  :ensure t
  :bind (("C-c f r" . clang-format-region)
         ("C-c f b" . clang-format-buffer)))
#+END_SRC
** uncrustify
#+BEGIN_SRC emacs-lisp
(use-package uncrustify-mode
  :ensure t
  :bind (("C-c u b" . uncrustify-buffer)))
#+END_SRC
* Python

#+BEGIN_SRC emacs-lisp
  (use-package elpy
    :ensure t
    :init
    (with-eval-after-load 'python (elpy-enable))
    (setq elpy-modules
    (quote (elpy-module-company
       elpy-module-eldoc
       elpy-module-pyvenv
       elpy-module-highlight-indentation
       elpy-module-yasnippet
       elpy-module-sane-defaults)))
    :config
    (setq  elpy-rpc-python-command "python3")
  )

  (use-package pyenv-mode
    :ensure t
    :init
    (setq exec-path (append exec-path '("~/.pyenv/bin")))
    :config
    (add-hook 'python-mode-hook 'pyenv-mode)
  )

  (use-package pyenv-mode-auto
    :ensure t
  )
#+END_SRC

* LaTeX
#+BEGIN_SRC elisp
(setq TeX-parse-self t) ; Enable parse on load.
(setq TeX-auto-save t) ; Enable parse on save.

(add-hook 'LaTeX-mode-hook 'turn-on-reftex)   ; with AUCTeX LaTeX mode
(add-hook 'latex-mode-hook 'turn-on-reftex)   ; with Emacs latex mode
#+END_SRC
* Modes
** YAML

#+BEGIN_SRC emacs-lisp
(use-package yaml-mode
  :ensure t)
#+END_SRC

** Markdown

#+BEGIN_SRC emacs-lisp
(use-package markdown-mode
  :ensure t)
#+END_SRC

** JSON

#+BEGIN_SRC emacs-lisp
(use-package json-mode
  :ensure t
  :mode "\\.json\\'"
  :mode "\\.avsc\\'"    ;; AVRO schema
)
#+END_SRC

** OpenSCAD

#+BEGIN_SRC emacs-lisp
(use-package scad-mode
  :ensure t
  :mode "\\.scad\\'"
  :config
  (linum-mode 1))
#+END_SRC

** CMake

#+BEGIN_SRC emacs-lisp
(use-package cmake-mode
  :ensure t)
#+END_SRC

** PHP

# #+BEGIN_SRC emacs-lisp
# (use-package php-mode
#   :ensure t
#   :config
#   (linum-mode 1))
# #+END_SRC
** REST Client

#+BEGIN_SRC emacs-lisp
(use-package restclient)
#+END_SRC

* custom.el
Set up the customize file to its own separate file, instead of saving
customize settings in [[file:init.el][init.el]].
#+BEGIN_SRC emacs-lisp
(setq custom-file (expand-file-name "custom.el" user-emacs-directory))
(load custom-file)
#+END_SRC
