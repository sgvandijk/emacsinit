#+TITLE: Emacs Configuration
#+AUTHOR: Sander van Dijk

* Installing Emacs

** OSX
#+BEGIN_SRC sh
brew install emacs --with-cocoa --with-imagemagick --with-gnutls
#+END_SRC

Other possible options:
- ~--devel~ :: installs latest development version
- ~--HEAD~ :: installs latest Git head

** Ubuntu

#+BEGIN_SRC sh
sudo add-apt-repository -y ppa:ubuntu-elisp
sudo apt-get update
sudo apt-get install emacs-snapshot
#+END_SRC

* Personal Information

#+BEGIN_SRC emacs-lisp
(setq
  user-full-name "Sander van Dijk"
  user-mail-address "sgvandijk@gmail.com"
)
#+END_SRC

* Customize settings
Load local configuration, such as platform dependent stuff
#+BEGIN_SRC emacs-lisp
(setq local-file (expand-file-name "local.el" user-emacs-directory))
(load local-file)
#+END_SRC
* Appearance
** Theme

I always come back to Zenburn..

#+BEGIN_SRC emacs-lisp
  (use-package zenburn-theme
  :ensure t
  ;; :config
  ;; (load-theme 'zenburn t t)
  )
#+END_SRC

Ayu mirage is a nice dark team with vibrant colours, originally for Submlime

#+begin_src emacs-lisp
  (use-package doom-themes
  :ensure t
  :config
  (load-theme 'doom-ayu-mirage t))
#+end_src

** Font

#+BEGIN_SRC emacs-lisp
  (set-frame-font "JetBrains Mono 10" nil t)
#+END_SRC

** Diminish
#+BEGIN_SRC emacs-lisp
(use-package diminish
  :ensure t)
(diminish 'abbrev-mode "Abv")
#+END_SRC
* Defaults

A collection of defaults for some global settings

#+BEGIN_SRC emacs-lisp
;; Keep all backup and auto-save files in one directory
(setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
(setq auto-save-file-name-transforms '((".*" "~/.emacs.d/auto-save-list/" t)))

;; Turn off the blinking cursor
(blink-cursor-mode -1)

(setq-default indent-tabs-mode nil)
(setq-default indicate-empty-lines t)
(setq-default c-basic-offset 2)
(setq-default c-default-style "bsd")
(setq-default js-indent-level 2)

(show-paren-mode t)
(column-number-mode t)

;; Turn off system bell
;; (setq visible-bell t) ;; Standard solution
(setq visible-bell nil)
(setq ring-bell-function 'ignore) ;; Solution to prevent ghosting on OSX

;; Use Cua mode for modern key bindings
(cua-mode t)

;; Enable line numbers in prog and config modes
(add-hook 'prog-mode-hook 'linum-mode)
(add-hook 'conf-mode-hook 'linum--mode)

;; Enable dir-locals for remote editing
(setq enable-remote-dir-locals t)

;; Use libnotify for alerts
(setq alert-default-style 'libnotify)
#+END_SRC

* Auto mode selection

#+begin_src emacs-lisp
(add-to-list 'auto-mode-alist '("\\.launch\\'" . xml-mode))
#+end_src

* Magit

#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t
    :bind ("C-x g" . magit-status)
    :init (setq magit-display-buffer-function
           #'magit-display-buffer-fullframe-status-v1)
    (add-hook 'git-commit-setup-hook 'git-commit-turn-on-flyspell))

  (use-package forge
    :ensure t
    :after magit
    :init (setq auth-sources '("~/.authinfo")))
#+END_SRC

* Ivy

Ivy is an alternative completion mechanism. 'Counsel' is built on top
of it to provide enhanced versions of common Emacs commands.

#+begin_src emacs-lisp
  ;; (use-package counsel
  ;;   :ensure t
  ;;   :after ivy
  ;;   :config (counsel-mode))

  (use-package ivy
    :ensure t
    :defer 0.1
    :diminish
    :bind (("C-c C-r" . ivy-resume)
           ("C-x B" . ivy-switch-buffer-other-window))
    :custom
    (ivy-count-format "(%d/%d) ")
    (ivy-use-virtual-buffers t)
    :config (ivy-mode))
#+end_src

* Multiple cursors

#+BEGIN_SRC emacs-lisp
(use-package multiple-cursors
  :ensure t
  :bind (
    ("C-S-c C-S-c" . mc/edit-lines)
    ("C->" . mc/mark-next-like-this)
    ("C-<" . mc/mark-previous-like-this)))
#+END_SRC

* Flycheck

# #+BEGIN_SRC emacs-lisp
# (use-package flycheck
#   :ensure t
#   :init
#   (global-flycheck-mode))
# #+END_SRC

* Company mode
Turn on company mode everywhere
#+BEGIN_SRC emacs-lisp
(use-package company
  :ensure t
  :defer t
  :diminish company-mode
  :config
  (add-hook 'after-init-hook 'global-company-mode))
#+END_SRC

* Projectile
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :ensure t
    :diminish projectile-mode
    :init
    (projectile-mode +1)
    :config
    (define-key projectile-mode-map (kbd "s-p") 'projectile-command-map)
    (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
    (setq projectile-indexing-method 'hybrid)
    )
#+END_SRC

* Org

  #+BEGIN_SRC emacs-lisp
    ;; set some keybindings
    (global-set-key (kbd "C-c o c") 'org-capture)
    (global-set-key (kbd "C-x a") 'org-agenda)

    (add-hook 'org-mode-hook
              (lambda ()
                (local-set-key (kbd "C-c ,") 'org-time-stamp-inactive))
              (turn-on-flyspell))

    ;; fontify code in code blocks
    (setq org-src-fontify-natively t)
    ;; hide emphasis markup
    (setq org-hide-emphasis-markers t)
    ;; default org capture file
    (setq org-default-notes-file "~/Dropbox/org/tasks/notes.org")

    ;; Pretty bullets for headlines
    (use-package org-bullets
      :ensure t
      :config
      (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))

    ;; Indent bodies with headline texts
    (setq org-startup-indented t)

    ;; set some faces
    (custom-theme-set-faces
     'zenburn
     '(org-document-title ((t (:inherit org-document-title :weight bold :height 1.5))))
     '(org-level-1 ((t (:inherit outline-1 :weight semi-bold :height 1.4))))
     '(org-level-2 ((t (:inherit outline-2 :weight semi-bold :height 1.3))))
     '(org-level-3 ((t (:inherit outline-3 :weight semi-bold :height 1.2))))
     '(org-level-4 ((t (:inherit outline-4 :weight semi-bold :height 1.1))))
     '(org-level-5 ((t (:inherit outline-5))))
     '(org-meta-line ((t (:inherit font-lock-comment-face :height 0.8))))
     )

    ;; set directory to search for tasks for the agenda
    (setq org-agenda-files '("~/Dropbox/org/tasks/notes.org" "~/Dropbox/org/roam/meetings" "~/Dropbox/org/roam/daily"))

    ;; Presentations using reveal.js
    (use-package ox-reveal
      :ensure t)

    (use-package htmlize :ensure t)
  #+END_SRC

** Org-Roam

#+BEGIN_SRC emacs-lisp
  (use-package org-roam
    :ensure t
    :custom (org-roam-directory (file-truename "~/Dropbox/org/roam/"))
    :bind (("C-c n l" . org-roam-buffer-toggle)
           ("C-c n f" . org-roam-node-find)
           ("C-c n g" . org-roam-graph)
           ("C-c n i" . org-roam-node-insert)
           ("C-c n t" . org-roam-dailies-capture-today)
           ("C-c n T" . org-roam-dailies-goto-today)
           ("C-c n Y" . org-roam-dailies-goto-yesterday)
           )
    :init
      (setq org-roam-capture-templates
            '(
              ("d" "default" plain
               "%?"
               :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org"
                                  "#+title: ${title}\n")
               :unnarrowed t)
              ("m" "meeting" plain
               "%?"
               :if-new (file+head "meetings/%<%Y%m%d%H%M%S>-${slug}.org"
                                  "#+title: ${title}\n")
               :unnarrowed t)
              )
            )
      :config (org-roam-db-autosync-mode)
    )

  (setq org-roam-v2-ack t)
#+END_SRC

* LSP Mode

#+begin_src emacs-lisp
  (use-package eglot
    :ensure t
    :hook ((c-mode-common . eglot-ensure)
           (python-mode . eglot-ensure))
    :config
    (setq-default eglot-workspace-configuration
                  '(:pylsp
                    (:plugins
                     (:black
                      (:enabled t)))))
    (add-hook `before-save-hook `eglot-format-buffer)
    )
#+end_src

* uncrustify
#+BEGIN_SRC emacs-lisp
(use-package uncrustify-mode
  :ensure t
  :bind (("C-c u b" . uncrustify-buffer)))
#+END_SRC

* LaTeX
#+BEGIN_SRC elisp
(setq TeX-parse-self t) ; Enable parse on load.
(setq TeX-auto-save t) ; Enable parse on save.

(add-hook 'LaTeX-mode-hook 'turn-on-reftex)   ; with AUCTeX LaTeX mode
(add-hook 'latex-mode-hook 'turn-on-reftex)   ; with Emacs latex mode
#+END_SRC

* Modes
** YAML

#+BEGIN_SRC emacs-lisp
(use-package yaml-mode
  :ensure t)
#+END_SRC

** Markdown

#+BEGIN_SRC emacs-lisp
(use-package markdown-mode
  :ensure t)
#+END_SRC

** JSON

#+BEGIN_SRC emacs-lisp
(use-package json-mode
  :ensure t
  :mode "\\.json\\'"
  :mode "\\.avsc\\'"    ;; AVRO schema
)
#+END_SRC

** OpenSCAD

#+BEGIN_SRC emacs-lisp
(use-package scad-mode
  :ensure t
  :mode "\\.scad\\'"
  :config
  (linum-mode 1))
#+END_SRC

** CMake

#+BEGIN_SRC emacs-lisp
(use-package cmake-mode
  :ensure t)
#+END_SRC

* Pomodoro

#+begin_src emacs-lisp
    (use-package pomidor
      :bind (("<f12>" . pomidor))
      :config (setq pomidor-sound-tick nil
                    pomidor-sound-tack nil)
      :hook (pomidor-mode . (lambda ()
                              (display-line-numbers-mode -1) ; Emacs 26.1+
                              (setq left-fringe-width 0 right-fringe-width 0)
                              (setq left-margin-width 2 right-margin-width 0)
                              ;; force fringe update
                              (set-window-buffer nil (current-buffer)))))
#+end_src

* custom.el
Set up the customize file to its own separate file, instead of saving
customize settings in [[file:init.el][init.el]].
#+BEGIN_SRC emacs-lisp
(setq custom-file (expand-file-name "custom.el" user-emacs-directory))
(load custom-file)
#+END_SRC
